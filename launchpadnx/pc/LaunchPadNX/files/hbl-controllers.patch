From 17de9ee1dc805354277c81d5550b92475b5c1e89 Mon Sep 17 00:00:00 2001
From: Pika <15848969+ThatNerdyPikachu@users.noreply.github.com>
Date: Wed, 15 Aug 2018 18:43:56 -0400
Subject: [PATCH] hold r to launch hbmenu

---
 stratosphere/loader/source/ldr_npdm.cpp | 431 ++++++++++++------------
 stratosphere/loader/source/ldr_nso.cpp  |  60 +++-
 2 files changed, 267 insertions(+), 224 deletions(-)

diff --git a/stratosphere/loader/source/ldr_npdm.cpp b/stratosphere/loader/source/ldr_npdm.cpp
index f7c7172..a17feab 100644
--- a/stratosphere/loader/source/ldr_npdm.cpp
+++ b/stratosphere/loader/source/ldr_npdm.cpp
@@ -29,11 +29,28 @@ FILE *NpdmUtils::OpenNpdmFromSdCard(u64 title_id) {
 
 
 FILE *NpdmUtils::OpenNpdm(u64 title_id) {
-    FILE *f_out = OpenNpdmFromSdCard(title_id);
-    if (f_out != NULL) {
-        return f_out;
+    if (title_id == 0x0100000000001003) {
+        hidInitialize();
+        hidScanInput();
+        u64 kDown = hidKeysDown(CONTROLLER_P1_AUTO);
+
+        if (kDown & KEY_R) {
+            hidExit();
+            FILE *f_out = OpenNpdmFromSdCard(title_id);
+            if (f_out != NULL) {
+                return f_out;
+            }
+        } else {
+            hidExit();
+            return OpenNpdmFromExeFS();
+        }
+    } else {
+        FILE *f_out = OpenNpdmFromSdCard(title_id);
+        if (f_out != NULL) {
+            return f_out;
+        }
+        return OpenNpdmFromExeFS();
     }
-    return OpenNpdmFromExeFS();
 }
 
 Result NpdmUtils::LoadNpdm(u64 tid, NpdmInfo *out) {
@@ -158,237 +175,237 @@ Result NpdmUtils::ValidateCapabilityAgainstRestrictions(u32 *restrict_caps, size
     u32 r_desc = 0;
     switch (low_bits) {
         case 3: /* Kernel flags. */
-            rc = 0xCE09;
-            for (size_t i = 0; i < num_restrict_caps; i++) {
-                if ((restrict_caps[i] & 0xF) == 0x7) {
-                    r_desc = restrict_caps[i] >> 4;
-                    u32 highest_thread_prio = desc & 0x3F;
-                    u32 r_highest_thread_prio = r_desc & 0x3F;
-                    desc >>= 6;
-                    r_desc >>= 6;
-                    u32 lowest_thread_prio = desc & 0x3F;
-                    u32 r_lowest_thread_prio = r_desc & 0x3F;
-                    desc >>= 6;
-                    r_desc >>= 6;
-                    u32 lowest_cpu_id = desc & 0xFF;
-                    u32 r_lowest_cpu_id = r_desc & 0xFF;
-                    desc >>= 8;
-                    r_desc >>= 8;
-                    u32 highest_cpu_id = desc & 0xFF;
-                    u32 r_highest_cpu_id = r_desc & 0xFF;
-                    if (highest_thread_prio > r_highest_thread_prio) {
-                       break;
-                    }
-                    if (lowest_thread_prio > highest_thread_prio) {
-                       break;
-                    }
-                    if (lowest_thread_prio < r_lowest_thread_prio) {
-                       break;
-                    }
-                    if (lowest_cpu_id < r_lowest_cpu_id) {
-                       break;
-                    }
-                    if (lowest_cpu_id > r_highest_cpu_id) {
-                       break;
-                    }
-                    if (highest_cpu_id > r_highest_cpu_id) {
-                       break;
-                    }       
+        rc = 0xCE09;
+        for (size_t i = 0; i < num_restrict_caps; i++) {
+            if ((restrict_caps[i] & 0xF) == 0x7) {
+                r_desc = restrict_caps[i] >> 4;
+                u32 highest_thread_prio = desc & 0x3F;
+                u32 r_highest_thread_prio = r_desc & 0x3F;
+                desc >>= 6;
+                r_desc >>= 6;
+                u32 lowest_thread_prio = desc & 0x3F;
+                u32 r_lowest_thread_prio = r_desc & 0x3F;
+                desc >>= 6;
+                r_desc >>= 6;
+                u32 lowest_cpu_id = desc & 0xFF;
+                u32 r_lowest_cpu_id = r_desc & 0xFF;
+                desc >>= 8;
+                r_desc >>= 8;
+                u32 highest_cpu_id = desc & 0xFF;
+                u32 r_highest_cpu_id = r_desc & 0xFF;
+                if (highest_thread_prio > r_highest_thread_prio) {
+                 break;
+             }
+             if (lowest_thread_prio > highest_thread_prio) {
+                 break;
+             }
+             if (lowest_thread_prio < r_lowest_thread_prio) {
+                 break;
+             }
+             if (lowest_cpu_id < r_lowest_cpu_id) {
+                 break;
+             }
+             if (lowest_cpu_id > r_highest_cpu_id) {
+                 break;
+             }
+             if (highest_cpu_id > r_highest_cpu_id) {
+                 break;
+             }       
                     /* Valid! */
-                    rc = 0;
-                    break;
-                }
-            }
-            break;
+             rc = 0;
+             break;
+         }
+     }
+     break;
         case 4: /* Syscall mask. */
-            rc = 0xD009;
-            for (size_t i = 0; i < num_restrict_caps; i++) {
-                if ((restrict_caps[i] & 0x1F) == 0xF) {
-                    r_desc = restrict_caps[i] >> 5;              
-                    u32 syscall_base = (desc >> 24);
-                    u32 r_syscall_base = (r_desc >> 24);
-                    if (syscall_base != r_syscall_base) {
-                        continue;
-                    }
-                    u32 syscall_mask = desc & 0xFFFFFF;
-                    u32 r_syscall_mask = r_desc & 0xFFFFFF;
-                    if ((r_syscall_mask & syscall_mask) != syscall_mask) {
-                        break;
-                    }
-                    /* Valid! */
-                    rc = 0;
-                    break;
-                }
+     rc = 0xD009;
+     for (size_t i = 0; i < num_restrict_caps; i++) {
+        if ((restrict_caps[i] & 0x1F) == 0xF) {
+            r_desc = restrict_caps[i] >> 5;              
+            u32 syscall_base = (desc >> 24);
+            u32 r_syscall_base = (r_desc >> 24);
+            if (syscall_base != r_syscall_base) {
+                continue;
+            }
+            u32 syscall_mask = desc & 0xFFFFFF;
+            u32 r_syscall_mask = r_desc & 0xFFFFFF;
+            if ((r_syscall_mask & syscall_mask) != syscall_mask) {
+                break;
             }
+                    /* Valid! */
+            rc = 0;
             break;
+        }
+    }
+    break;
         case 6: /* Map IO/Normal. */ {
-                rc = 0xD409;
-                if (caps_remaining == 0) {
-                    break;
-                }
-                u32 next_cap = *cur_cap++;
-                caps_remaining--;
-                if ((next_cap & 0x7F) != 0x3F) {
-                    break;
-                }
-                u32 next_desc = next_cap >> 7;
-                u32 base_addr = desc & 0xFFFFFF;
-                u32 base_size = next_desc & 0xFFFFFF;
+    rc = 0xD409;
+    if (caps_remaining == 0) {
+        break;
+    }
+    u32 next_cap = *cur_cap++;
+    caps_remaining--;
+    if ((next_cap & 0x7F) != 0x3F) {
+        break;
+    }
+    u32 next_desc = next_cap >> 7;
+    u32 base_addr = desc & 0xFFFFFF;
+    u32 base_size = next_desc & 0xFFFFFF;
                 /* Size check the mapping. */
-                if (base_size >> 20) {
-                    break;
-                }
-                u32 base_end = base_addr + base_size;
+    if (base_size >> 20) {
+        break;
+    }
+    u32 base_end = base_addr + base_size;
                 /* Validate it's possible to validate this mapping. */
-                if (num_restrict_caps < 2) {
-                    break;
-                }
-                for (size_t i = 0; i < num_restrict_caps - 1; i++) {
-                    if ((restrict_caps[i] & 0x7F) == 0x3F) {
-                        r_desc = restrict_caps[i] >> 7;
-                        if ((restrict_caps[i+1] & 0x7F) != 0x3F) {
-                            break;
-                        }
-                        u32 r_next_desc = restrict_caps[++i] >> 7;
-                        u32 r_base_addr = r_desc & 0xFFFFFF;
-                        u32 r_base_size = r_next_desc & 0xFFFFFF;
+    if (num_restrict_caps < 2) {
+        break;
+    }
+    for (size_t i = 0; i < num_restrict_caps - 1; i++) {
+        if ((restrict_caps[i] & 0x7F) == 0x3F) {
+            r_desc = restrict_caps[i] >> 7;
+            if ((restrict_caps[i+1] & 0x7F) != 0x3F) {
+                break;
+            }
+            u32 r_next_desc = restrict_caps[++i] >> 7;
+            u32 r_base_addr = r_desc & 0xFFFFFF;
+            u32 r_base_size = r_next_desc & 0xFFFFFF;
                         /* Size check the mapping. */
-                        if (r_base_size >> 20) {
-                            break;
-                        }
-                        u32 r_base_end = r_base_addr + r_base_size;
+            if (r_base_size >> 20) {
+                break;
+            }
+            u32 r_base_end = r_base_addr + r_base_size;
                         /* Validate is_io matches. */
-                        if (((r_desc >> 24) & 1) ^ ((desc >> 24) & 1)) {
-                            continue;
-                        }
+            if (((r_desc >> 24) & 1) ^ ((desc >> 24) & 1)) {
+                continue;
+            }
                         /* Validate is_ro matches. */
-                        if (((r_next_desc >> 24) & 1) ^ ((next_desc >> 24) & 1)) {
-                            continue;
-                        }
+            if (((r_next_desc >> 24) & 1) ^ ((next_desc >> 24) & 1)) {
+                continue;
+            }
                         /* Validate bounds. */
-                        if (base_addr < r_base_addr || base_end > r_base_end) {
-                            continue;
-                        }
-                        /* Valid! */
-                        rc = 0;
-                        break;
-                    }
-                }
+            if (base_addr < r_base_addr || base_end > r_base_end) {
+                continue;
             }
+                        /* Valid! */
+            rc = 0;
             break;
+        }
+    }
+}
+break;
         case 7: /* Map Normal Page. */
-            rc = 0xD609;
-            for (size_t i = 0; i < num_restrict_caps; i++) {
-                if ((restrict_caps[i] & 0xFF) == 0x7F) {
-                    r_desc = restrict_caps[i] >> 8;              
-                    if (r_desc != desc) {
-                        continue;
-                    }
+rc = 0xD609;
+for (size_t i = 0; i < num_restrict_caps; i++) {
+    if ((restrict_caps[i] & 0xFF) == 0x7F) {
+        r_desc = restrict_caps[i] >> 8;              
+        if (r_desc != desc) {
+            continue;
+        }
                     /* Valid! */
-                    rc = 0;
-                    break;
-                }
-            }
-            break;
+        rc = 0;
+        break;
+    }
+}
+break;
         case 11: /* IRQ Pair. */ 
-            rc = 0x0;
-            for (unsigned int irq_i = 0; irq_i < 2; irq_i++) {
-                u32 irq = desc & 0x3FF;
-                desc >>= 10;
-                if (irq != 0x3FF) {
-                    bool found = false;
-                    for (size_t i = 0; i < num_restrict_caps && !found; i++) {
-                        if ((restrict_caps[i] & 0xFFF) == 0x7FF) {
-                            r_desc = restrict_caps[i] >> 12;
-                            u32 r_irq_0 = r_desc & 0x3FF;
-                            r_desc >>= 10;
-                            u32 r_irq_1 = r_desc & 0x3FF;
-                            found |= irq == r_irq_0 || irq == r_irq_1;
-                            found |= r_irq_0 == 0x3FF && r_irq_1 == 0x3FF;
-                        }
-                    }
-                    if (!found) {
-                        rc = 0xDE09;
-                        break;
-                    }
-                }
+rc = 0x0;
+for (unsigned int irq_i = 0; irq_i < 2; irq_i++) {
+    u32 irq = desc & 0x3FF;
+    desc >>= 10;
+    if (irq != 0x3FF) {
+        bool found = false;
+        for (size_t i = 0; i < num_restrict_caps && !found; i++) {
+            if ((restrict_caps[i] & 0xFFF) == 0x7FF) {
+                r_desc = restrict_caps[i] >> 12;
+                u32 r_irq_0 = r_desc & 0x3FF;
+                r_desc >>= 10;
+                u32 r_irq_1 = r_desc & 0x3FF;
+                found |= irq == r_irq_0 || irq == r_irq_1;
+                found |= r_irq_0 == 0x3FF && r_irq_1 == 0x3FF;
             }
+        }
+        if (!found) {
+            rc = 0xDE09;
             break;
+        }
+    }
+}
+break;
         case 13: /* App Type. */
-            rc = 0xE209;
-            if (num_restrict_caps) {
-                for (size_t i = 0; i < num_restrict_caps; i++) {
-                    if ((restrict_caps[i] & 0x3FFF) == 0x1FFF) {
-                        r_desc = restrict_caps[i] >> 14;              
-                        break;
-                    }
-                }
-            } else {
-                r_desc = 0;
-            }
-            if (desc == r_desc) {
-                /* Valid! */
-                rc = 0;
-            }
+rc = 0xE209;
+if (num_restrict_caps) {
+    for (size_t i = 0; i < num_restrict_caps; i++) {
+        if ((restrict_caps[i] & 0x3FFF) == 0x1FFF) {
+            r_desc = restrict_caps[i] >> 14;              
             break;
-        case 14: /* Kernel Release Version. */
-            rc = 0xE409;
-            if (num_restrict_caps) {
-                for (size_t i = 0; i < num_restrict_caps; i++) {
-                    if ((restrict_caps[i] & 0x7FFF) == 0x3FFF) {
-                        r_desc = restrict_caps[i] >> 15;              
-                        break;
-                    }
-                }
-            } else {
-                r_desc = 0;
-            }
-            if (desc == r_desc) {
+        }
+    }
+} else {
+    r_desc = 0;
+}
+if (desc == r_desc) {
                 /* Valid! */
-                rc = 0;
-            }
+    rc = 0;
+}
+break;
+        case 14: /* Kernel Release Version. */
+rc = 0xE409;
+if (num_restrict_caps) {
+    for (size_t i = 0; i < num_restrict_caps; i++) {
+        if ((restrict_caps[i] & 0x7FFF) == 0x3FFF) {
+            r_desc = restrict_caps[i] >> 15;              
             break;
+        }
+    }
+} else {
+    r_desc = 0;
+}
+if (desc == r_desc) {
+                /* Valid! */
+    rc = 0;
+}
+break;
         case 15: /* Handle Table Size. */
-            rc = 0xE609;
-            for (size_t i = 0; i < num_restrict_caps; i++) {
-                if ((restrict_caps[i] & 0xFFFF) == 0x7FFF) {
-                    r_desc = restrict_caps[i] >> 16;    
-                    desc &= 0x3FF;
-                    r_desc &= 0x3FF;
-                    if (desc > r_desc) {
-                        break;
-                    }
-                    /* Valid! */
-                    rc = 0;
-                    break;
-                }
-            }
+rc = 0xE609;
+for (size_t i = 0; i < num_restrict_caps; i++) {
+    if ((restrict_caps[i] & 0xFFFF) == 0x7FFF) {
+        r_desc = restrict_caps[i] >> 16;    
+        desc &= 0x3FF;
+        r_desc &= 0x3FF;
+        if (desc > r_desc) {
             break;
+        }
+                    /* Valid! */
+        rc = 0;
+        break;
+    }
+}
+break;
         case 16: /* Debug Flags. */
-            rc = 0xE809;
-            if (num_restrict_caps) {
-                for (size_t i = 0; i < num_restrict_caps; i++) {
-                    if ((restrict_caps[i] & 0x1FFFF) == 0xFFFF) {
-                        r_desc = restrict_caps[i] >> 17;              
-                        break;
-                    }
-                }
-            } else {
-                r_desc = 0;
-            }
-            if ((desc & ~r_desc) == 0) {
-                /* Valid! */
-                rc = 0;
-            }
+rc = 0xE809;
+if (num_restrict_caps) {
+    for (size_t i = 0; i < num_restrict_caps; i++) {
+        if ((restrict_caps[i] & 0x1FFFF) == 0xFFFF) {
+            r_desc = restrict_caps[i] >> 17;              
             break;
+        }
+    }
+} else {
+    r_desc = 0;
+}
+if ((desc & ~r_desc) == 0) {
+                /* Valid! */
+    rc = 0;
+}
+break;
         case 32: /* Empty Descriptor. */
-            rc = 0;
-            break;
+rc = 0;
+break;
         default: /* Unrecognized Descriptor. */
-            rc = 0xC809;
-            break;
-    }
-    return rc;
+rc = 0xC809;
+break;
+}
+return rc;
 }
 
 Result NpdmUtils::ValidateCapabilities(u32 *acid_caps, size_t num_acid_caps, u32 *aci0_caps, size_t num_aci0_caps) {
diff --git a/stratosphere/loader/source/ldr_nso.cpp b/stratosphere/loader/source/ldr_nso.cpp
index 26e2656..5b9b81d 100644
--- a/stratosphere/loader/source/ldr_nso.cpp
+++ b/stratosphere/loader/source/ldr_nso.cpp
@@ -38,13 +38,39 @@ bool NsoUtils::CheckNsoStubbed(unsigned int index, u64 title_id) {
 }
 
 FILE *NsoUtils::OpenNso(unsigned int index, u64 title_id) {
-    FILE *f_out = OpenNsoFromSdCard(index, title_id);
-    if (f_out != NULL) {
-        return f_out;
-    } else if (CheckNsoStubbed(index, title_id)) {
-        return NULL;
+    if (title_id == 0x0100000000001003) {
+        hidInitialize();
+        hidScanInput();
+        u64 kDown = hidKeysDown(CONTROLLER_P1_AUTO);
+        
+        if (kDown & KEY_R) {
+            hidExit();
+
+            FILE *f_out = OpenNsoFromSdCard(index, title_id);
+            if (f_out != NULL) {
+                return f_out;
+            } else if (CheckNsoStubbed(index, title_id)) {
+                return NULL;
+            } else {
+                return OpenNsoFromExeFS(index);
+            }
+        } else {
+            hidExit();
+            if (CheckNsoStubbed(index, title_id)) {
+                return NULL;
+            } else {
+                return OpenNsoFromExeFS(index);
+            }
+        }
     } else {
-        return OpenNsoFromExeFS(index);
+        FILE *f_out = OpenNsoFromSdCard(index, title_id);
+        if (f_out != NULL) {
+            return f_out;
+        } else if (CheckNsoStubbed(index, title_id)) {
+            return NULL;
+        } else {
+            return OpenNsoFromExeFS(index);
+        }
     }
 }
 
@@ -153,20 +179,20 @@ Result NsoUtils::CalculateNsoLoadExtents(u32 addspace_type, u32 args_size, NsoLo
         switch (addspace_type & 0xE) {
             case 0:
             case 4:
-                addspace_start = 0x200000ULL;
-                addspace_size = 0x3FE00000ULL;
-                break;
+            addspace_start = 0x200000ULL;
+            addspace_size = 0x3FE00000ULL;
+            break;
             case 2:
-                addspace_start = 0x8000000ULL;
-                addspace_size = 0x78000000ULL;
-                break;
+            addspace_start = 0x8000000ULL;
+            addspace_size = 0x78000000ULL;
+            break;
             case 6:
-                addspace_start = 0x8000000ULL;
-                addspace_size = 0x7FF8000000ULL;
-                break;
+            addspace_start = 0x8000000ULL;
+            addspace_size = 0x7FF8000000ULL;
+            break;
             default:
                 /* TODO: Panic. */
-                return 0xD001;
+            return 0xD001;
         }
     } else {
         if (addspace_type & 2) {
@@ -256,7 +282,7 @@ Result NsoUtils::LoadNsosIntoProcessMemory(Handle process_h, u64 title_id, NsoLo
             }
             
             u8 *map_base = (u8 *)nso_map.GetMappedAddress();
-                        
+
             FILE *f_nso = OpenNso(i, title_id);
             if (f_nso == NULL) {
                 /* Is there a better error to return here? */
-- 
2.18.0.windows.1

